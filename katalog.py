import os
import sqlite3
import requests
import time
import pandas as pd

# üìå –ü—É—Ç–∏ –∫ –±–∞–∑–µ –∏ Excel-—Ñ–∞–π–ª—É
base_dir = os.path.abspath(os.path.join(os.getcwd(), ".."))
db_path = os.path.join(base_dir, "finmodel.db")
xls_path = os.path.join(base_dir, "Finmodel.xlsm")

# üìå –ß—Ç–µ–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–π
df_orgs = pd.read_excel(xls_path, sheet_name="–ù–∞—Å—Ç—Ä–æ–π–∫–∏–û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–π", engine="openpyxl")
df_orgs = df_orgs[["id", "–û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è", "Token_WB"]].dropna()

# üìå –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ
try:
    conn = sqlite3.connect(db_path, timeout=10)
    cursor = conn.cursor()
except sqlite3.OperationalError as e:
    print(f"–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ: {e}")
    exit(1)

# üìå –ü–µ—Ä–µ—Å–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã —Å –Ω—É–∂–Ω—ã–º–∏ —Å—Ç–æ–ª–±—Ü–∞–º–∏
cursor.execute("DROP TABLE IF EXISTS katalog;")
cursor.execute("""
CREATE TABLE katalog (
    org_id INTEGER,
    –û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è TEXT,
    nmID INTEGER,
    imtID INTEGER,
    nmUUID TEXT,
    subjectID INTEGER,
    subjectName TEXT,
    brand TEXT,
    vendorCode TEXT,
    techSize TEXT,
    sku TEXT,
    chrtID INTEGER,
    createdAt TEXT,
    updatedAt TEXT,
    PRIMARY KEY (org_id, chrtID)
);
""")
conn.commit()

# –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ç–∞–±–ª–∏—Ü—ã
cursor.execute("PRAGMA table_info(katalog);")
print("–°–¢–†–£–ö–¢–£–†–ê katalog:", cursor.fetchall())

# üìå Wildberries API
url = "https://content-api.wildberries.ru/content/v2/get/cards/list"
headers_template = {"Content-Type": "application/json"}

# üìå –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Å–µ—Ö –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–π
for _, row in df_orgs.iterrows():
    org_id = row["id"]
    org_name = row["–û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è"]
    token = row["Token_WB"]

    print(f"‚Üí –û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è: {org_name} (ID={org_id})")
    headers = headers_template.copy()
    headers["Authorization"] = token

    has_more = True
    updatedAt = None
    nmID = None

    while has_more:
        payload = {
            "settings": {
                "cursor": {"limit": 100},
                "filter": {"withPhoto": -1}
            }
        }

        if updatedAt and nmID:
            payload["settings"]["cursor"].update({
                "updatedAt": updatedAt,
                "nmID": nmID
            })

        try:
            response = requests.post(url, json=payload, headers=headers, timeout=30)
            data = response.json()
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: {e}")
            break

        cards = data.get("cards", [])
        if not cards:
            print("  –ù–µ—Ç –∫–∞—Ä—Ç–æ—á–µ–∫.")
            break

        rows = []
        for card in cards:
            createdAt = card.get("createdAt")
            updatedAtCard = card.get("updatedAt")
            for size in card.get("sizes", []):
                techSize = size.get("techSize")
                chrtID = size.get("chrtID")
                for sku in size.get("skus", []):
                    rows.append((
                        org_id,
                        org_name,
                        card.get("nmID"),
                        card.get("imtID"),
                        card.get("nmUUID"),
                        card.get("subjectID"),
                        card.get("subjectName"),
                        card.get("brand"),
                        card.get("vendorCode"),
                        techSize,
                        sku,
                        chrtID,
                        createdAt,
                        updatedAtCard
                    ))

        if rows:
            try:
                cursor.executemany("""
                    REPLACE INTO katalog (
                        org_id, –û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è, nmID, imtID, nmUUID,
                        subjectID, subjectName, brand, vendorCode,
                        techSize, sku, chrtID, createdAt, updatedAt
                    ) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
                """, rows)
                conn.commit()
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –≤ –ë–î: {e}")
                break

        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫—É—Ä—Å–æ—Ä–∞
        cursor_data = data.get("cursor", {})
        updatedAt = cursor_data.get("updatedAt")
        nmID = cursor_data.get("nmID")
        total = cursor_data.get("total", 0)

        print(f"  –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(cards)} –∫–∞—Ä—Ç–æ—á–µ–∫, –æ—Å—Ç–∞–ª–æ—Å—å ~{total}")
        has_more = total >= 100
        if has_more:
            time.sleep(0.6)

# üìå –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ
conn.close()
print("‚úÖ –í—Å–µ –∫–∞—Ä—Ç–æ—á–∫–∏ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –≤ —Ç–∞–±–ª–∏—Ü—É katalog (–±–µ–∑ –¥—É–±–ª–µ–π).")
