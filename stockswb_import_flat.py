from pathlib import Path
import sqlite3
import requests
import json
import time
import pandas as pd
from datetime import datetime

# --- –ü—É—Ç–∏ ---
base_dir = Path(__file__).resolve().parent.parent
db_path = base_dir / "finmodel.db"
xls_path = base_dir / "Finmodel.xlsm"

# --- –ü–æ–ª—É—á–∞–µ–º "–ü–µ—Ä–∏–æ–¥–ù–∞—á–∞–ª–æ" –∏–∑ Excel ---
df_settings = pd.read_excel(xls_path, sheet_name="–ù–∞—Å—Ç—Ä–æ–π–∫–∏", engine="openpyxl")
def find_setting(name):
    val = df_settings.loc[df_settings["–ü–∞—Ä–∞–º–µ—Ç—Ä"].str.strip() == name, "–ó–Ω–∞—á–µ–Ω–∏–µ"]
    return val.values[0] if not val.empty else None
def parse_date(dt):
    s = str(dt).replace("T", " ").replace("/", ".").strip()
    try:
        return datetime.strptime(s, "%d.%m.%Y").strftime("%Y-%m-%dT00:00:00")
    except Exception:
        try:
            return datetime.strptime(s, "%Y-%m-%d").strftime("%Y-%m-%dT00:00:00")
        except Exception:
            return pd.to_datetime(s).strftime("%Y-%m-%dT%H:%M:%S")
period_start = parse_date(find_setting("–ü–µ—Ä–∏–æ–¥–ù–∞—á–∞–ª–æ"))
print(f"–î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –æ—Å—Ç–∞—Ç–∫–æ–≤: {period_start}")

# --- –ß—Ç–µ–Ω–∏–µ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–π ---
df_orgs = pd.read_excel(xls_path, sheet_name="–ù–∞—Å—Ç—Ä–æ–π–∫–∏–û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–π", engine="openpyxl")
df_orgs = df_orgs[["id", "–û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è", "Token_WB"]].dropna()

# --- –í—Å–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ –ø–æ–ª—è –æ—Å—Ç–∞—Ç–∫–æ–≤ (WB-API) ---
STOCKS_FIELDS = [
    "lastChangeDate", "warehouseName", "supplierArticle", "nmId", "barcode", "quantity", "inWayToClient",
    "inWayFromClient", "quantityFull", "category", "subject", "brand", "techSize", "Price", "Discount",
    "isSupply", "isRealization", "SCCode"
]

# --- –ü–µ—Ä–µ—Å–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã ---
conn = sqlite3.connect(db_path)
cursor = conn.cursor()
fields_sql = ", ".join([f"{f} TEXT" for f in STOCKS_FIELDS])
cursor.execute("DROP TABLE IF EXISTS StocksWBFlat;")
cursor.execute(f"""
CREATE TABLE StocksWBFlat (
    org_id INTEGER,
    –û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è TEXT,
    {fields_sql},
    PRIMARY KEY (org_id, nmId, warehouseName)
);
""")
conn.commit()

# --- API-–∑–∞–ø—Ä–æ—Å ---
url = "https://statistics-api.wildberries.ru/api/v1/supplier/stocks"
headers_template = {"Content-Type": "application/json"}

for _, row in df_orgs.iterrows():
    org_id = row["id"]
    org_name = row["–û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è"]
    token = row["Token_WB"]
    print(f"\n‚Üí –û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è: {org_name} (ID={org_id})")

    headers = headers_template.copy()
    headers["Authorization"] = token

    date_from = period_start
    total_loaded = 0
    page = 1

    while True:
        params = {"dateFrom": date_from}
        print(f"  üì§ –ó–∞–ø—Ä–æ—Å page {page}, dateFrom={date_from} ...", end=" ", flush=True)
        try:
            resp = requests.get(url, params=params, headers=headers, timeout=60)
            if resp.status_code != 200:
                print(f"\n  ‚ö†Ô∏è –ó–∞–ø—Ä–æ—Å –≤–µ—Ä–Ω—É–ª —Å—Ç–∞—Ç—É—Å {resp.status_code}: {resp.text}")
                time.sleep(5)
                break
            data = resp.json()
        except Exception as e:
            print(f"\n  ‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: {e}")
            time.sleep(5)
            break

        if not data:
            print("‚úÖ –í—Å–µ –æ—Å—Ç–∞—Ç–∫–∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –¥–ª—è —ç—Ç–æ–π –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏.")
            break

        # –†–∞—Å–ø–∞–∫–æ–≤–∫–∞
        rows = []
        for rec in data:
            flat = [org_id, org_name] + [str(rec.get(f, "")) for f in STOCKS_FIELDS]
            rows.append(flat)
        try:
            placeholders = ",".join(["?"] * (2 + len(STOCKS_FIELDS)))
            cursor.executemany(f"""
                INSERT OR REPLACE INTO StocksWBFlat
                VALUES ({placeholders})
            """, rows)
            conn.commit()
        except Exception as e:
            print(f"\n  ‚ö†Ô∏è –û—à–∏–±–∫–∞ –≤—Å—Ç–∞–≤–∫–∏: {e}")
            break

        total_loaded += len(rows)
        print(f"  +{len(rows)} –æ—Å—Ç–∞—Ç–∫–æ–≤ (–∏—Ç–æ–≥–æ: {total_loaded})")

        if len(rows) == 0 or len(rows) < 60000:
            print("  ‚úÖ –û—Å—Ç–∞—Ç–∫–∏ –ø–æ –ø–µ—Ä–∏–æ–¥—É –∑–∞–≥—Ä—É–∂–µ–Ω—ã –ø–æ–ª–Ω–æ—Å—Ç—å—é.")
            break

        # pagination: —Å–ª–µ–¥—É—é—â–∏–π dateFrom = lastChangeDate –ø–æ—Å–ª–µ–¥–Ω–µ–π —Å—Ç—Ä–æ–∫–∏
        date_from = data[-1].get("lastChangeDate")
        page += 1
        time.sleep(3)  # WB –ª–∏–º–∏—Ç: 1 –∑–∞–ø—Ä–æ—Å –≤ –º–∏–Ω—É—Ç—É, –Ω–æ –º–æ–∂–Ω–æ —á—É—Ç—å —á–∞—â–µ

conn.close()
print("\n‚úÖ –í—Å–µ –æ—Å—Ç–∞—Ç–∫–∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –∏ —Ä–∞—Å–ø–∞—Ä—Å–µ–Ω—ã –≤ —Ç–∞–±–ª–∏—Ü—É StocksWBFlat (–±–µ–∑ –¥—É–±–ª–µ–π).")
