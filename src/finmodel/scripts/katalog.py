import sqlite3
import time
from pathlib import Path

import requests

from finmodel.logger import get_logger
from finmodel.utils.settings import load_organizations

# Keep REQUIRED_COLUMNS in sync with ``load_organizations`` implementation.
REQUIRED_COLUMNS = {"id", "–û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è", "Token_WB"}

logger = get_logger(__name__)


def main() -> None:
    # üìå Paths
    base_dir = Path(__file__).resolve().parents[3]
    db_path = base_dir / "finmodel.db"

    # üìå Load organizations
    df_orgs = load_organizations()

    missing_cols = REQUIRED_COLUMNS - set(df_orgs.columns)
    if missing_cols:
        logger.error(
            "–ù–∞—Å—Ç—Ä–æ–π–∫–∏.xlsm is missing required columns: %s",
            ", ".join(sorted(missing_cols)),
        )
        return

    if df_orgs.empty:
        logger.error("–ù–∞—Å—Ç—Ä–æ–π–∫–∏.xlsm –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–π —Å —Ç–æ–∫–µ–Ω–∞–º–∏.")
        return

    # üìå –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ
    try:
        conn = sqlite3.connect(db_path, timeout=10)
        cursor = conn.cursor()
    except sqlite3.OperationalError as e:
        logger.error("–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ: %s", e)
        exit(1)

    # üìå –ü–µ—Ä–µ—Å–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã —Å –Ω—É–∂–Ω—ã–º–∏ —Å—Ç–æ–ª–±—Ü–∞–º–∏
    cursor.execute("DROP TABLE IF EXISTS katalog;")
    cursor.execute(
        """
    CREATE TABLE katalog (
        org_id INTEGER,
        –û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è TEXT,
        nmID INTEGER,
        imtID INTEGER,
        nmUUID TEXT,
        subjectID INTEGER,
        subjectName TEXT,
        brand TEXT,
        vendorCode TEXT,
        techSize TEXT,
        sku TEXT,
        chrtID INTEGER,
        createdAt TEXT,
        updatedAt TEXT,
        PRIMARY KEY (org_id, chrtID)
    );
    """
    )
    conn.commit()

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ç–∞–±–ª–∏—Ü—ã
    cursor.execute("PRAGMA table_info(katalog);")
    logger.info("–°–¢–†–£–ö–¢–£–†–ê katalog: %s", cursor.fetchall())

    # üìå Wildberries API
    url = "https://content-api.wildberries.ru/content/v2/get/cards/list"
    headers_template = {"Content-Type": "application/json"}

    # üìå –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Å–µ—Ö –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–π
    for _, row in df_orgs.iterrows():
        org_id = row["id"]
        org_name = row["–û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è"]
        token = row["Token_WB"]

        logger.info("‚Üí –û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è: %s (ID=%s)", org_name, org_id)
        headers = headers_template.copy()
        headers["Authorization"] = token

        has_more = True
        updatedAt = None
        nmID = None

        while has_more:
            payload = {"settings": {"cursor": {"limit": 100}, "filter": {"withPhoto": -1}}}

            if updatedAt and nmID:
                payload["settings"]["cursor"].update({"updatedAt": updatedAt, "nmID": nmID})

            try:
                response = requests.post(url, json=payload, headers=headers, timeout=30)
                if response.status_code != 200:
                    logger.warning(
                        "–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: —Å—Ç–∞—Ç—É—Å %s, –æ—Ç–≤–µ—Ç: %s", response.status_code, response.text
                    )
                    break
                data = response.json()
            except Exception as e:
                logger.warning("–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: %s", e)
                break

            cards = data.get("cards", [])
            if not cards:
                logger.info("  –ù–µ—Ç –∫–∞—Ä—Ç–æ—á–µ–∫.")
                break

            rows = []
            for card in cards:
                createdAt = card.get("createdAt")
                updatedAtCard = card.get("updatedAt")
                for size in card.get("sizes", []):
                    techSize = size.get("techSize")
                    chrtID = size.get("chrtID")
                    for sku in size.get("skus", []):
                        rows.append(
                            (
                                org_id,
                                org_name,
                                card.get("nmID"),
                                card.get("imtID"),
                                card.get("nmUUID"),
                                card.get("subjectID"),
                                card.get("subjectName"),
                                card.get("brand"),
                                card.get("vendorCode"),
                                techSize,
                                sku,
                                chrtID,
                                createdAt,
                                updatedAtCard,
                            )
                        )

            if rows:
                try:
                    cursor.executemany(
                        """
                        REPLACE INTO katalog (
                            org_id, –û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è, nmID, imtID, nmUUID,
                            subjectID, subjectName, brand, vendorCode,
                            techSize, sku, chrtID, createdAt, updatedAt
                        ) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
                    """,
                        rows,
                    )
                    conn.commit()
                except Exception as e:
                    logger.warning("–û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –≤ –ë–î: %s", e)
                    break

            # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫—É—Ä—Å–æ—Ä–∞
            cursor_data = data.get("cursor", {})
            updatedAt = cursor_data.get("updatedAt")
            nmID = cursor_data.get("nmID")
            total = cursor_data.get("total", 0)

            logger.info("  –ó–∞–≥—Ä—É–∂–µ–Ω–æ %s –∫–∞—Ä—Ç–æ—á–µ–∫, –æ—Å—Ç–∞–ª–æ—Å—å ~%s", len(cards), total)
            has_more = total >= 100
            if has_more:
                time.sleep(0.6)

    # üìå –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ
    conn.close()
    logger.info("‚úÖ –í—Å–µ –∫–∞—Ä—Ç–æ—á–∫–∏ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –≤ —Ç–∞–±–ª–∏—Ü—É katalog (–±–µ–∑ –¥—É–±–ª–µ–π).")


if __name__ == "__main__":
    main()
