import json
import sqlite3
import time
from pathlib import Path

import requests
from requests.adapters import HTTPAdapter, Retry

from finmodel.logger import get_logger
from finmodel.utils.settings import find_setting, load_organizations, parse_date

logger = get_logger(__name__)


def main() -> None:
    # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã, –∑–∞—è–≤–ª–µ–Ω–Ω—ã–π –≤ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏ WB API
    PAGE_LIMIT = 100_000
    REQUEST_TIMEOUT = 60

    # --- Paths ---
    base_dir = Path(__file__).resolve().parents[3]
    db_path = base_dir / "finmodel.db"

    # --- –ü–æ–ª—É—á–∞–µ–º "–ü–µ—Ä–∏–æ–¥–ù–∞—á–∞–ª–æ" ---
    period_start = parse_date(find_setting("–ü–µ—Ä–∏–æ–¥–ù–∞—á–∞–ª–æ")).strftime("%Y-%m-%dT%H:%M:%S")
    logger.info("–î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –æ—Å—Ç–∞—Ç–∫–æ–≤: %s", period_start)

    # --- Load organizations ---
    sheet = find_setting("ORG_SHEET", default="–ù–∞—Å—Ç—Ä–æ–π–∫–∏")
    df_orgs = load_organizations(sheet=sheet)
    if df_orgs.empty:
        logger.error("–ù–∞—Å—Ç—Ä–æ–π–∫–∏.xlsm –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–π —Å —Ç–æ–∫–µ–Ω–∞–º–∏.")
        raise SystemExit(1)

    # --- –í—Å–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ –ø–æ–ª—è –æ—Å—Ç–∞—Ç–∫–æ–≤ (WB-API) ---
    STOCKS_FIELDS = [
        "lastChangeDate",
        "warehouseName",
        "supplierArticle",
        "nmId",
        "barcode",
        "quantity",
        "inWayToClient",
        "inWayFromClient",
        "quantityFull",
        "category",
        "subject",
        "brand",
        "techSize",
        "Price",
        "Discount",
        "isSupply",
        "isRealization",
        "SCCode",
    ]

    # --- –ü–µ—Ä–µ—Å–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã ---
    conn = sqlite3.connect(db_path)
    cursor = conn.cursor()
    fields_sql = ", ".join([f"{f} TEXT" for f in STOCKS_FIELDS])
    cursor.execute("DROP TABLE IF EXISTS StocksWBFlat;")
    cursor.execute(
        f"""
    CREATE TABLE StocksWBFlat (
        org_id INTEGER,
        –û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è TEXT,
        {fields_sql},
        PRIMARY KEY (org_id, nmId, warehouseName)
    );
    """
    )
    conn.commit()

    # --- HTTP session ---
    def make_http() -> requests.Session:
        s = requests.Session()
        retries = Retry(
            total=5,
            read=5,
            connect=5,
            backoff_factor=0.5,
            status_forcelist=(429, 500, 502, 503, 504),
            allowed_methods=frozenset(["GET"]),
        )
        s.mount("https://", HTTPAdapter(max_retries=retries))
        s.mount("http://", HTTPAdapter(max_retries=retries))
        return s

    # --- API-–∑–∞–ø—Ä–æ—Å ---
    url = "https://statistics-api.wildberries.ru/api/v1/supplier/stocks"
    headers_template = {"Content-Type": "application/json"}

    http = make_http()

    for _, row in df_orgs.iterrows():
        org_id = row["id"]
        org_name = row["–û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è"]
        token = row["Token_WB"]
        logger.info("‚Üí –û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è: %s (ID=%s)", org_name, org_id)

        headers = headers_template.copy()
        headers["Authorization"] = token

        date_from = period_start
        total_loaded = 0
        page = 1

        while True:
            params = {"dateFrom": date_from}
            logger.info("  üì§ –ó–∞–ø—Ä–æ—Å page %s, dateFrom=%s ...", page, date_from)
            try:
                resp = http.get(url, params=params, headers=headers, timeout=REQUEST_TIMEOUT)
                if resp.status_code != 200:
                    logger.warning("  –ó–∞–ø—Ä–æ—Å –≤–µ—Ä–Ω—É–ª —Å—Ç–∞—Ç—É—Å %s: %s", resp.status_code, resp.text)
                    time.sleep(5)
                    break
                data = resp.json()
            except Exception as e:
                logger.warning("  –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: %s", e)
                time.sleep(5)
                break

            if not data:
                logger.info("‚úÖ –í—Å–µ –æ—Å—Ç–∞—Ç–∫–∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –¥–ª—è —ç—Ç–æ–π –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏.")
                break

            # –†–∞—Å–ø–∞–∫–æ–≤–∫–∞
            rows = []
            for rec in data:
                flat = [org_id, org_name] + [str(rec.get(f, "")) for f in STOCKS_FIELDS]
                rows.append(flat)
            try:
                placeholders = ",".join(["?"] * (2 + len(STOCKS_FIELDS)))
                cursor.executemany(
                    f"""
                    INSERT OR REPLACE INTO StocksWBFlat
                    VALUES ({placeholders})
                """,
                    rows,
                )
                conn.commit()
            except Exception as e:
                logger.warning("  –û—à–∏–±–∫–∞ –≤—Å—Ç–∞–≤–∫–∏: %s", e)
                break

            total_loaded += len(rows)
            logger.info("  +%s –æ—Å—Ç–∞—Ç–∫–æ–≤ (–∏—Ç–æ–≥–æ: %s)", len(rows), total_loaded)

            if len(rows) < PAGE_LIMIT:
                logger.info("  ‚úÖ –û—Å—Ç–∞—Ç–∫–∏ –ø–æ –ø–µ—Ä–∏–æ–¥—É –∑–∞–≥—Ä—É–∂–µ–Ω—ã –ø–æ–ª–Ω–æ—Å—Ç—å—é.")
                break

            # pagination: —Å–ª–µ–¥—É—é—â–∏–π dateFrom = lastChangeDate –ø–æ—Å–ª–µ–¥–Ω–µ–π —Å—Ç—Ä–æ–∫–∏
            date_from = data[-1].get("lastChangeDate")
            page += 1
            time.sleep(3)  # WB –ª–∏–º–∏—Ç: 1 –∑–∞–ø—Ä–æ—Å –≤ –º–∏–Ω—É—Ç—É, –Ω–æ –º–æ–∂–Ω–æ —á—É—Ç—å —á–∞—â–µ

    conn.close()
    logger.info("‚úÖ –í—Å–µ –æ—Å—Ç–∞—Ç–∫–∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –∏ —Ä–∞—Å–ø–∞—Ä—Å–µ–Ω—ã –≤ —Ç–∞–±–ª–∏—Ü—É StocksWBFlat (–±–µ–∑ –¥—É–±–ª–µ–π).")


if __name__ == "__main__":
    main()
